## Cross-Service Review Context: Authentication, Account & User Management Services

This document provides a synthesized context and architectural blueprint based on the review of the `authentication-service`, `account-management-service`, and `user-management-service`. It should be used to guide the review of subsequent microservices within the same ecosystem to ensure consistency, quality, and adherence to established patterns.

---

### 1. Shared Architectural Blueprint & Key Principles

This section defines the expected "blueprint" for all services in this ecosystem.

*   **Core Technology Stack:**
    *   **Language/Platform:** TypeScript on Node.js
    *   **Framework:** Express.js
    *   **Dependency Injection:** `tsyringe`
    *   **Logging:** `winston`
    *   **Testing:** `jest`
    *   **Resilience:** `opossum` (Circuit Breaker)
    *   **Cloud Services:** AWS Cognito (IdP), AWS DynamoDB (Database)

*   **Core Architecture: Clean Architecture**
    *   `src/api`: Contains API layer components (Controllers, Routes, Middlewares, DTOs).
    *   `src/application`: Contains application business logic (Services, Use Cases, Interfaces).
    *   `src/domain`: Contains core domain entities, value objects, and custom exceptions.
    *   `src/infrastructure`: Contains implementations for external concerns (Adapters for AWS, Database Repositories, Configuration).

*   **Key Guiding Principles:**
    1.  **Interface-Driven Design:** All services and adapters must be abstracted behind interfaces.
    2.  **Dependency Injection:** `tsyringe` is used to manage all dependencies.
    3.  **Centralized & Structured Error Handling:** A global error-handling middleware produces consistent JSON error responses.
    4.  **Resilience by Default:** Critical external service interactions (especially AWS) must be wrapped in a circuit breaker.
    5.  **Contextual Logging:** All log entries are structured (JSON) and include a `requestId`.
    6.  **Configuration Management:** Configuration is loaded from environment variables via a dedicated `ConfigService`.
    7.  **Security First:** Endpoints are protected by an authentication guard middleware.

---

### 2. Service-Specific Summaries

*   **Authentication Service:** Handles user authentication, token management, and registration. Sets the foundational architectural pattern.
*   **Account Management Service:** Handles user profile updates and MFA settings. Demonstrates high consistency with the auth service.
*   **User Management Service:** Handles user/group/role/permission administration.
    *   **Review Finding:** This service shows **excellent** consistency with the established blueprint. It correctly implements all core principles, including Clean Architecture, DI, and resilience patterns.
    *   **Minor Verification Point:** The review noted a potential missing `DynamoUserProfileRepository.ts` implementation file in the directory listing, which should be verified.

---

### 3. Overall Project Goal

The services are designed to be interconnected but modular parts of a larger system. The strict adherence to a shared architecture ensures that developers can move between services with minimal cognitive load, and that the system as a whole remains robust, maintainable, and resilient. This context should be applied to the review of any subsequent services in the project.
